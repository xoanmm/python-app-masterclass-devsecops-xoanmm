on:
  push:
    branches:
      - 'main'
  pull_request:
    types: [opened, synchronize, reopened]

name: CI
jobs:
  lint-python-code:
    if: "${{ !contains(github.event.commits[0].message, 'chore(release):') }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: pip3 install --upgrade pip

      - name: Install necessary dependencies
        run: pip3 install -r requirements.txt

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: "-a -v"

  unit-tests:
    if: "${{ !contains(github.event.commits[0].message, 'chore(release):') }}"
    needs:
      - lint-python-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: pip3 install --upgrade pip

      - name: Install python dependencies
        run: pip3 install -r requirements.txt

      - name: Run unit-tests
        run: pytest --cov --cov-report=xml

      - name: Upload artifact for coverage
        uses: actions/upload-artifact@v4.6.0
        with:
          name: coverage
          path: coverage.xml

  security-checks:
    if: "${{ !contains(github.event.commits[0].message, 'chore(release):') }}"
    needs:
      - unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact for coverage
        uses: actions/download-artifact@v4.1.7
        with:
          name: coverage

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2.3.0
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.test.exclusions=tests/**
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
